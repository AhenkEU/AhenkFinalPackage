install.packages("FinalPackageAhenk")
setwd("/home/ahenk/")
install("FinalPackageAhenk")
install("FinalPackageAhenk")
library(FinalPackageAhenk)
library(FinalPackageAhenk)
install("FinalPackageAhenk")
setwd("/home/ahenk/")
devtools::document()
setwd("/home/ahenk/")
devtools::document()
setwd("/home/ahenk/FinalPackageAhenk")
devtools::document()
library(FinalPackageAhenk)
install("FinalPackageAhenk")
install("FinalPackageAhenk")
install(roxygen2)
install("FinalPackageAhenk")
install(devtools)
library(devtools)
library(roxygen2)
install("FinalPackageAhenk")
setwd("/home/ahenk/")
install("FinalPackageAhenk")
library(FinalPackageAhenk)
install("FinalPackageAhenk")
install("FinalPackageAhenk")
library(FinalPackageAhenk)
str<-"ababA"
str<-"ababA"
FinalPackageAhenk::isAllUnique(str)
str<-"abab"
FinalPackageAhenk::isAllUnique(str)
str<-"abaAb"
FinalPackageAhenk::isAllUnique(str)
str<-"ababA"
FinalPackageAhenk::isAllUnique(str)
str<-"abab"
FinalPackageAhenk::isAllUnique(str)
str<-"Aabab"
FinalPackageAhenk::isAllUnique(str)
str<-"ababc"
FinalPackageAhenk::isAllUnique(str)
str<-"abac"
FinalPackageAhenk::isAllUnique(str)
str<-"deneme"
FinalPackageAhenk::isAllUnique(str)
FinalPackageAhenk::isAllUnique(str)
str<-"denem"
FinalPackageAhenk::isAllUnique(str)
OurString<-"ABCDEFG"
# We unlist it to make the string turn into char by char and
# we take the length of the chars to see how many characters are in the given string.
S<-unlist(strsplit(OurString, ""))
SLength<-length(unlist(strsplit(OurString, "")))
# Function to check for duplicates
# It starts to check forwards and backwards and tries to find if there is a char which occurs more than once.
CheckDup<-function(string,s_length){
for (i in s_length) {
for(j in (s_length):1){
if (string[i]==string[j]){
return (T)
}
}
}
return (F)
}
# This part f for printing the results. If the function returned T, then duplicates are found. Else, they are all unique.
if (CheckDup(S, SLength)){
x<- "Duplicates Found."
} else{
x<-"All unique"
}
OurString<-"aabbc"
S<-unlist(strsplit(OurString, ""))
SLength<-length(unlist(strsplit(OurString, "")))
# Function to check for duplicates
# It starts to check forwards and backwards and tries to find if there is a char which occurs more than once.
CheckDup<-function(string,s_length){
for (i in s_length) {
for(j in (s_length):1){
if (string[i]==string[j]){
return (T)
}
}
}
return (F)
}
# This part f for printing the results. If the function returned T, then duplicates are found. Else, they are all unique.
if (CheckDup(S, SLength)){
x<- "Duplicates Found."
} else{
x<-"All unique"
}
x
str<-"aabbc"
FinalPackageAhenk::isAllUnique(str)
FinalPackageAhenk::isAllUnique(str)
install.packages("FinalPackageAhenk")
install.packages("FinalPackageAhenk")
install("FinalPackageAhenk")
library(roxygen2)
install("FinalPackageAhenk")
library(devtools)
library(roxygen2)
install("FinalPackageAhenk")
str<-"aabbc"
FinalPackageAhenk::isAllUnique(str)
str<-"deneme"
FinalPackageAhenk::isAllUnique(str)
str<-"abcdef"
FinalPackageAhenk::isAllUnique(str)
str<-"abcdef"
FinalPackageAhenk::isAllUnique(str)
OurString<-"aabbc"
# We unlist it to make the string turn into char by char and
# we take the length of the chars to see how many characters are in the given string.
S<-unlist(strsplit(OurString, ""))
SLength<-length(unlist(strsplit(OurString, "")))
# Function to check for duplicates
# It starts to check forwards and backwards and tries to find if there is a char which occurs more than once.
CheckDup<-function(string,s_length){
for (i in s_length) {
for(j in (s_length):1){
if (string[i]==string[j]){
return (T)
}
}
}
return (F)
}
OurString<-"aabbc"
# We unlist it to make the string turn into char by char and
# we take the length of the chars to see how many characters are in the given string.
S<-unlist(strsplit(OurString, ""))
SLength<-length(unlist(strsplit(OurString, "")))
# Function to check for duplicates
# It starts to check forwards and backwards and tries to find if there is a char which occurs more than once.
CheckDup<-function(string,s_length){
for (i in s_length) {
for(j in (s_length):1){
if (string[i]==string[j]){
return (T)
}
}
}
return (F)
}
OurString<-"aabbc"
# We unlist it to make the string turn into char by char and
# we take the length of the chars to see how many characters are in the given string.
S<-unlist(strsplit(OurString, ""))
SLength<-length(unlist(strsplit(OurString, "")))
# Function to check for duplicates
# It starts to check forwards and backwards and tries to find if there is a char which occurs more than once.
CheckDup<-function(string,s_length){
for (i in s_length) {
for(j in (s_length):1){
if (string[i]==string[j]){
return (T)
}
}
}
return (F)
}
OurString<-"aabbc"
# We unlist it to make the string turn into char by char and
# we take the length of the chars to see how many characters are in the given string.
S<-unlist(strsplit(OurString, ""))
SLength<-length(unlist(strsplit(OurString, "")))
# Function to check for duplicates
# It starts to check forwards and backwards and tries to find if there is a char which occurs more than once.
CheckDup<-function(string,s_length){
for (i in s_length) {
for(j in (s_length):1){
if (string[i]==string[j]){
return (T)
}
}
}
return (F)
}
# This part f for printing the results. If the function returned T, then duplicates are found. Else, they are all unique.
if (CheckDup(S, SLength)){
x<- "Duplicates Found."
} else{
x<-"All unique"
}
x
OurString<-"abcdef"
S<-unlist(strsplit(OurString, ""))
SLength<-length(unlist(strsplit(OurString, "")))
# Function to check for duplicates
# It starts to check forwards and backwards and tries to find if there is a char which occurs more than once.
CheckDup<-function(string,s_length){
for (i in s_length) {
for(j in (s_length):1){
if (string[i]==string[j]){
return (T)
}
}
}
return (F)
}
# This part f for printing the results. If the function returned T, then duplicates are found. Else, they are all unique.
if (CheckDup(S, SLength)){
x<- "Duplicates Found."
} else{
x<-"All unique"
}
x
OurString<-"abcdef"
# We unlist it to make the string turn into char by char and
# we take the length of the chars to see how many characters are in the given string.
S<-unlist(strsplit(OurString, ""))
SLength<-length(unlist(strsplit(OurString, "")))
# Function to check for duplicates
# It starts to check forwards and backwards and tries to find if there is a char which occurs more than once.
CheckDup<-function(string,s_length){
for (i in s_length) {
for(j in (s_length-1):1){
if (string[i]==string[j]){
return (T)
}
}
}
return (F)
}
# This part f for printing the results. If the function returned T, then duplicates are found. Else, they are all unique.
if (CheckDup(S, SLength)){
x<- "Duplicates Found."
} else{
x<-"All unique"
}
x
OurString<-"abcdefa"
# We unlist it to make the string turn into char by char and
# we take the length of the chars to see how many characters are in the given string.
S<-unlist(strsplit(OurString, ""))
SLength<-length(unlist(strsplit(OurString, "")))
# Function to check for duplicates
# It starts to check forwards and backwards and tries to find if there is a char which occurs more than once.
CheckDup<-function(string,s_length){
for (i in s_length) {
for(j in (s_length-1):1){
if (string[i]==string[j]){
return (T)
}
}
}
return (F)
}
# This part f for printing the results. If the function returned T, then duplicates are found. Else, they are all unique.
if (CheckDup(S, SLength)){
x<- "Duplicates Found."
} else{
x<-"All unique"
}
x
OurString<-"deneme"
# We unlist it to make the string turn into char by char and
# we take the length of the chars to see how many characters are in the given string.
S<-unlist(strsplit(OurString, ""))
SLength<-length(unlist(strsplit(OurString, "")))
# Function to check for duplicates
# It starts to check forwards and backwards and tries to find if there is a char which occurs more than once.
CheckDup<-function(string,s_length){
for (i in s_length) {
for(j in (s_length-1):1){
if (string[i]==string[j]){
return (T)
}
}
}
return (F)
}
# This part f for printing the results. If the function returned T, then duplicates are found. Else, they are all unique.
if (CheckDup(S, SLength)){
x<- "Duplicates Found."
} else{
x<-"All unique"
}
x
OurString<-"ababc"
# We unlist it to make the string turn into char by char and
# we take the length of the chars to see how many characters are in the given string.
S<-unlist(strsplit(OurString, ""))
SLength<-length(unlist(strsplit(OurString, "")))
# Function to check for duplicates
# It starts to check forwards and backwards and tries to find if there is a char which occurs more than once.
CheckDup<-function(string,s_length){
for (i in s_length) {
for(j in (s_length-1):1){
if (string[i]==string[j]){
return (T)
}
}
}
return (F)
}
# This part f for printing the results. If the function returned T, then duplicates are found. Else, they are all unique.
if (CheckDup(S, SLength)){
x<- "Duplicates Found."
} else{
x<-"All unique"
}
x
isPermPalindrome(str)
FinalPackageAhenk::isPermPalindrome(str)
str<-"abcdabc"
FinalPackageAhenk::isPermPalindrome(str)
p1<-c(1:45)
p2<-c(47:82)
p3<-c(90:98)
GivenList<-c(p1,p2,p3)
missingNOs(GivenList)
FinalPackageAhenk::missingNOs(GivenList)
setwd("/home/ahenk/FinalPackageAhenk")
git init
